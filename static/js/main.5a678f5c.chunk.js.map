{"version":3,"sources":["logo.svg","PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","initialState","mouseIsPressed","state","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","componentDidMount","map","rowIdx","key","nodeIdx","getNewGridWithWallToggledOff","handleMouseDown","handleMouseEnter","handleMouseUp","getNewGridWithStart","getNewGridWithEnd","rM","count","min","max","getNewGridWithWallToggledOn","ch","Math","floor","random","console","log","resetMaze","grid1","onClick","visualizeDijkstra","createVerticalMaze","createHorizontalMaze","createRandomMaze","color","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5a678f5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from 'react';\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React,{Component} from 'react';\r\nimport Node from './Node/Node.jsx';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst START_NODE_ROW = 9;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 9;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.initialState = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n    this.state = this.initialState;\r\n  }\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n\r\n  resetMaze() {\r\n    this.componentDidMount();\r\n    const {grid, mouseIsPressed} = this.state;\r\n    return(\r\n      <>\r\n      <div className=\"grid\">\r\n      {grid.map((row, rowIdx) => {\r\n        return (\r\n          <div key={rowIdx}>\r\n          {row.map((node, nodeIdx) => {\r\n              const {row, col, isFinish, isStart, isWall} = node;\r\n                if(!((row==9 && col==15) || (row==9 && col==35)))\r\n                {\r\n                  const newGrid = getNewGridWithWallToggledOff(this.state.grid, row, col);\r\n                  document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                    'node';\r\n                  this.setState(this.state);\r\n                  this.setState({grid: newGrid});\r\n                  return (\r\n                  <Node\r\n                  key={nodeIdx}\r\n                  col={col}\r\n                  isFinish={isFinish}\r\n                  isStart={isStart}\r\n                  isWall={false}\r\n                  mouseIsPressed={mouseIsPressed}\r\n                  onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                  onMouseEnter={(row, col) =>\r\n                    this.handleMouseEnter(row, col)\r\n                  }\r\n                  onMouseUp={() => this.handleMouseUp()}\r\n                  row={row}></Node>\r\n                  );\r\n                }\r\n                else if(row==9 && col==15)\r\n                {\r\n                  const newGrid = getNewGridWithStart(this.state.grid, row, col);\r\n                  document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                  'node node-start';\r\n                  this.setState({grid: newGrid});\r\n                  return (\r\n                  <Node\r\n                  key={nodeIdx}\r\n                  col={col}\r\n                  isFinish={isFinish}\r\n                  isStart={true}\r\n                  isWall={false}\r\n                  mouseIsPressed={mouseIsPressed}\r\n                  onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                  onMouseEnter={(row, col) =>\r\n                    this.handleMouseEnter(row, col)\r\n                  }\r\n                  onMouseUp={() => this.handleMouseUp()}\r\n                  row={row}></Node>\r\n                  );\r\n                }\r\n                else if(row==9 && col==35)\r\n                {\r\n                  const newGrid = getNewGridWithEnd(this.state.grid, row, col);\r\n                  document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                  'node node-finish';\r\n                  this.setState({grid: newGrid});\r\n                  return (\r\n                  <Node\r\n                  key={nodeIdx}\r\n                  col={col}\r\n                  isFinish={true}\r\n                  isStart={isStart}\r\n                  isWall={false}\r\n                  mouseIsPressed={mouseIsPressed}\r\n                  onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                  onMouseEnter={(row, col) =>\r\n                    this.handleMouseEnter(row, col)\r\n                  }\r\n                  onMouseUp={() => this.handleMouseUp()}\r\n                  row={row}></Node>\r\n                  );\r\n                }\r\n              })}\r\n          </div>\r\n        );\r\n      })}\r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  \r\n  createRandomMaze() {\r\n    this.rM();\r\n    let count=300;\r\n    let i=0;\r\n    const {grid, mouseIsPressed} = this.state;\r\n    return(\r\n      <>\r\n      <div className=\"grid\">\r\n      {grid.map((row, rowIdx) => {\r\n        return (\r\n          <div key={rowIdx}>\r\n          {row.map((node, nodeIdx) => {\r\n              i+=1;\r\n              const {row, col, isFinish, isStart, isWall} = node;\r\n              if(row===0 || row==20 || col==0 || col==48)\r\n              {\r\n              const newGrid = getNewGridWithWallToggledOn(this.state.grid, row, col);\r\n              document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-mazecr';\r\n              this.setState({grid: newGrid});\r\n              return (\r\n                <Node\r\n                key={nodeIdx}\r\n                col={col}\r\n                isFinish={isFinish}\r\n                isStart={isStart}\r\n                isWall={true}\r\n                mouseIsPressed={mouseIsPressed}\r\n                onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                onMouseEnter={(row, col) =>\r\n                  this.handleMouseEnter(row, col)\r\n                }\r\n                onMouseUp={() => this.handleMouseUp()}\r\n                row={row}></Node>\r\n              );\r\n            }\r\n            else if(!((row==9 && col==15) || (row==9 && col==35)) && count>0)\r\n            {\r\n              let ch=randomIntFromInterval(0,2);\r\n              console.log(ch);\r\n              if(ch===1)\r\n              {\r\n                const newGrid = getNewGridWithWallToggledOn(this.state.grid, row, col);\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                'node node-mazecr';\r\n                this.setState({grid: newGrid});\r\n                count-=1;\r\n                return (\r\n                  <Node\r\n                  key={nodeIdx}\r\n                  col={col}\r\n                  isFinish={isFinish}\r\n                  isStart={isStart}\r\n                  isWall={true}\r\n                  mouseIsPressed={mouseIsPressed}\r\n                  onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                  onMouseEnter={(row, col) =>\r\n                    this.handleMouseEnter(row, col)\r\n                  }\r\n                  onMouseUp={() => this.handleMouseUp()}\r\n                  row={row}></Node>\r\n                );\r\n              }\r\n              else {\r\n                const newGrid = getNewGridWithWallToggledOff(this.state.grid, row, col);\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                'node';\r\n                this.setState({grid: newGrid});\r\n              return (\r\n                <Node\r\n                key={nodeIdx}\r\n                col={col}\r\n                isFinish={isFinish}\r\n                isStart={isStart}\r\n                isWall={false}\r\n                mouseIsPressed={mouseIsPressed}\r\n                onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                onMouseEnter={(row, col) =>\r\n                  this.handleMouseEnter(row, col)\r\n                }\r\n                onMouseUp={() => this.handleMouseUp()}\r\n                row={row}></Node>\r\n              );\r\n              }\r\n            }\r\n              else if (!((row == 9 && col == 15) || (row == 9 && col == 35)) && count <= 0){\r\n                const newGrid = getNewGridWithWallToggledOff(this.state.grid, row, col);\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                  'node';\r\n                this.setState({ grid: newGrid });\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    col={col}\r\n                    isFinish={isFinish}\r\n                    isStart={isStart}\r\n                    isWall={false}\r\n                    mouseIsPressed={mouseIsPressed}\r\n                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) =>\r\n                      this.handleMouseEnter(row, col)\r\n                    }\r\n                    onMouseUp={() => this.handleMouseUp()}\r\n                    row={row}></Node>\r\n                );\r\n              }\r\n          })}\r\n          </div>\r\n        );\r\n      })}\r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  rM() {\r\n    this.setState(this.state);\r\n    this.resetMaze();\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  createVerticalMaze() {\r\n    this.rM();\r\n    const grid1 = getInitialGrid();\r\n    this.setState({ grid1 });\r\n    const {grid, mouseIsPressed} = this.state;\r\n    return(\r\n      <>\r\n      <div className=\"grid\">\r\n      {grid.map((row, rowIdx) => {\r\n        return (\r\n          <div key={rowIdx}>\r\n          {row.map((node, nodeIdx) => {\r\n            const {row, col, isFinish, isStart, isWall} = node;\r\n            if(row===0 || row==20 || col==0 || col==48)\r\n            {\r\n              console.log(col);\r\n              const newGrid = getNewGridWithWallToggledOn(this.state.grid, row, col);\r\n              this.setState({grid: newGrid});\r\n              return (\r\n                <Node\r\n                key={nodeIdx}\r\n                col={col}\r\n                isFinish={isFinish}\r\n                isStart={isStart}\r\n                isWall={true}\r\n                mouseIsPressed={mouseIsPressed}\r\n                onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                onMouseEnter={(row, col) =>\r\n                  this.handleMouseEnter(row, col)\r\n                }\r\n                onMouseUp={() => this.handleMouseUp()}\r\n                row={row}></Node>\r\n              );\r\n            }\r\n            else if(col%4==0 && row!=19)\r\n            {\r\n                console.log(col);\r\n                const newGrid = getNewGridWithWallToggledOn(this.state.grid, row, col);\r\n                this.setState({grid: newGrid});\r\n                return (\r\n                  <Node\r\n                  key={nodeIdx}\r\n                  col={col}\r\n                  isFinish={isFinish}\r\n                  isStart={isStart}\r\n                  isWall={true}\r\n                  mouseIsPressed={mouseIsPressed}\r\n                  onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                  onMouseEnter={(row, col) =>\r\n                    this.handleMouseEnter(row, col)\r\n                  }\r\n                  onMouseUp={() => this.handleMouseUp()}\r\n                  row={row}></Node>\r\n                );\r\n            }\r\n            else if(col%2==0 && col%4!=0 && row!=1)\r\n            {\r\n                console.log(col);\r\n                const newGrid = getNewGridWithWallToggledOn(this.state.grid, row, col);\r\n                this.setState({grid: newGrid});\r\n                return (\r\n                  <Node\r\n                  key={nodeIdx}\r\n                  col={col}\r\n                  isFinish={isFinish}\r\n                  isStart={isStart}\r\n                  isWall={true}\r\n                  mouseIsPressed={mouseIsPressed}\r\n                  onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                  onMouseEnter={(row, col) =>\r\n                    this.handleMouseEnter(row, col)\r\n                  }\r\n                  onMouseUp={() => this.handleMouseUp()}\r\n                  row={row}></Node>\r\n                );\r\n            }\r\n            else\r\n            {\r\n                console.log(col);\r\n                const newGrid = getNewGridWithWallToggledOff(this.state.grid, row, col);\r\n                this.setState({grid: newGrid});\r\n              return (\r\n                <Node\r\n                key={nodeIdx}\r\n                col={col}\r\n                isFinish={isFinish}\r\n                isStart={isStart}\r\n                isWall={false}\r\n                mouseIsPressed={mouseIsPressed}\r\n                onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                onMouseEnter={(row, col) =>\r\n                  this.handleMouseEnter(row, col)\r\n                }\r\n                onMouseUp={() => this.handleMouseUp()}\r\n                row={row}></Node>\r\n              );\r\n            }\r\n          })}\r\n          </div>\r\n        );\r\n      })}\r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  createHorizontalMaze() {\r\n    this.rM();\r\n    const grid1 = getInitialGrid();\r\n    this.setState({ grid1 });\r\n    const {grid, mouseIsPressed} = this.state;\r\n    let i=1;\r\n    return(\r\n      <>\r\n      <div className=\"grid\">\r\n      {grid.map((row, rowIdx) => {\r\n        return (\r\n          <div key={rowIdx}>\r\n          {row.map((node, nodeIdx) => {\r\n            const {row, col, isFinish, isStart, isWall} = node;\r\n            if(row===0 || row==20 || col==0 || col==48)\r\n            {\r\n              console.log(col);\r\n              const newGrid = getNewGridWithWallToggledOn(this.state.grid, row, col);\r\n              this.setState({grid: newGrid});\r\n              return (\r\n                <Node\r\n                key={nodeIdx}\r\n                col={col}\r\n                isFinish={isFinish}\r\n                isStart={isStart}\r\n                isWall={true}\r\n                mouseIsPressed={mouseIsPressed}\r\n                onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                onMouseEnter={(row, col) =>\r\n                  this.handleMouseEnter(row, col)\r\n                }\r\n                onMouseUp={() => this.handleMouseUp()}\r\n                row={row}></Node>\r\n              );\r\n            }\r\n            else if(row%4==0 && col!=47)\r\n            {\r\n                console.log(col);\r\n                const newGrid = getNewGridWithWallToggledOn(this.state.grid, row, col);\r\n                this.setState({grid: newGrid});\r\n                return (\r\n                  <Node\r\n                  key={nodeIdx}\r\n                  col={col}\r\n                  isFinish={isFinish}\r\n                  isStart={isStart}\r\n                  isWall={true}\r\n                  mouseIsPressed={mouseIsPressed}\r\n                  onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                  onMouseEnter={(row, col) =>\r\n                    this.handleMouseEnter(row, col)\r\n                  }\r\n                  onMouseUp={() => this.handleMouseUp()}\r\n                  row={row}></Node>\r\n                );\r\n            }\r\n            else if(row%2==0 && row%4!=0 && col!=1)\r\n            {\r\n                console.log(col);\r\n                const newGrid = getNewGridWithWallToggledOn(this.state.grid, row, col);\r\n                this.setState({grid: newGrid});\r\n                return (\r\n                  <Node\r\n                  key={nodeIdx}\r\n                  col={col}\r\n                  isFinish={isFinish}\r\n                  isStart={isStart}\r\n                  isWall={true}\r\n                  mouseIsPressed={mouseIsPressed}\r\n                  onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                  onMouseEnter={(row, col) =>\r\n                    this.handleMouseEnter(row, col)\r\n                  }\r\n                  onMouseUp={() => this.handleMouseUp()}\r\n                  row={row}></Node>\r\n                );\r\n            }\r\n            else\r\n            {\r\n                console.log(col);\r\n                const newGrid = getNewGridWithWallToggledOff(this.state.grid, row, col);\r\n                this.setState({grid: newGrid});\r\n              return (\r\n                <Node\r\n                key={nodeIdx}\r\n                col={col}\r\n                isFinish={isFinish}\r\n                isStart={isStart}\r\n                isWall={false}\r\n                mouseIsPressed={mouseIsPressed}\r\n                onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                onMouseEnter={(row, col) =>\r\n                  this.handleMouseEnter(row, col)\r\n                }\r\n                onMouseUp={() => this.handleMouseUp()}\r\n                row={row}></Node>\r\n              );\r\n            }\r\n          })}\r\n          </div>\r\n        );\r\n      })}\r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n      <button onClick={() => this.visualizeDijkstra()}>\r\n      Visualize Dijkstra's Algorithm\r\n      </button>\r\n      <button onClick={() => this.rM()}>\r\n      Reset Board\r\n      </button>\r\n      <button onClick={() => this.createVerticalMaze()}>\r\n      Create Vertical Maze\r\n      </button>\r\n      <button onClick={() => this.createHorizontalMaze()}>\r\n      Create Horizontal Maze\r\n      </button>\r\n      <button onClick={() => this.createRandomMaze()}>\r\n      Create Random Maze\r\n      </button>\r\n      <div className=\"grid\" id=\"m\">\r\n      {grid.map((row, rowIdx) => {\r\n        return (\r\n          <div key={rowIdx} id=\"n\">\r\n          {row.map((node, nodeIdx) => {\r\n            const {row, col, isFinish, isStart, isWall} = node;\r\n            return (\r\n              <Node\r\n              key={nodeIdx}\r\n              col={col}\r\n              isFinish={isFinish}\r\n              isStart={isStart}\r\n              isWall={isWall}\r\n              mouseIsPressed={mouseIsPressed}\r\n              color='white'\r\n              onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n              onMouseEnter={(row, col) =>\r\n                this.handleMouseEnter(row, col)\r\n              }\r\n              onMouseUp={() => this.handleMouseUp()}\r\n              row={row}></Node>\r\n            );\r\n          })}\r\n          </div>\r\n        );\r\n      })}\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 21; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 49; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithWallToggledOn = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: true,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\nconst getNewGridWithWallToggledOff = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: false,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithStart = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isStart: true,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\nconst getNewGridWithEnd = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isFinish: true,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max-min+1) + min);\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer.jsx'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}